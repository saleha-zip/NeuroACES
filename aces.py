# -*- coding: utf-8 -*-
"""aces.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15qaQ9CDgKYAB1gB4T4k4Yof3kViQAKTH
"""

import pandas as pd
from sklearn.ensemble import RandomForestClassifier
import joblib
import os

# ====================
# MODEL DEFINITIONS
# ====================
disease_models = {}

# Load training data (assumed already preprocessed)
# data = pd.read_csv("/content/synthetic_neuroaces_clean (1).csv")
data = pd.read_csv("C:\\Users\\Admin\\.vscode\\NeuroACES\\app\\synthetic_neuroaces_clean.csv")


# Define target diseases and features
target_cols = [
    'Depression', 'PTSD', 'Diabetes',
    'Cardiovascular_Disease', 'Autoimmune_Disorder', 'Substance_Abuse'
]
features = data.drop(columns=target_cols)
feature_names = features.columns.tolist()  # Store feature order

# Train one model per disease
for disease in target_cols:
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(features, data[disease])
    disease_models[disease] = model
    joblib.dump(model, f"model_{disease}.pkl")  # Save model

# ============================
# PREDICTION FUNCTION
# ============================
def predict_diseases(user_input_dict):
    """
    Predicts each disease from user input using trained models.

    Parameters:
        user_input_dict (dict): Dict where keys match feature names.

    Returns:
        dict: Boolean predictions for each disease.
    """
    # Ensure the input has all expected features in the correct order
    input_df = pd.DataFrame([user_input_dict])[feature_names]
    results = {}
    for disease in target_cols:
        model_path = f"model_{disease}.pkl"
        if os.path.exists(model_path):
            model = joblib.load(model_path)
        else:
            raise FileNotFoundError(f"Model file for {disease} not found.")
        results[disease] = bool(model.predict(input_df)[0])
    return results

# ============================
# EXAMPLE USAGE
# ============================
if __name__ == "__main__":
    sample_input = {
        'ACE_Score': 5,
        'Sleep_Hours': 6,
        'PHQ9_Score': 15,
        'GAD7_Score': 12,
        'NR3C1_Methylation': 0.85,
        'Cortisol_Level': 18.0,
        'Support_System': 1,
        'Substance_Use': 1,
        'ACE_PhysicalAbuse': 1,
        'ACE_SexualAbuse': 1,
        'ACE_EmotionalNeglect': 1,
        'ACE_ParentalDivorce': 1
    }

    preds = predict_diseases(sample_input)
    print("\nDisease Risk Predictions:")
    for disease, has_risk in preds.items():
        print(f"{disease}: {'Yes' if has_risk else 'No'}")